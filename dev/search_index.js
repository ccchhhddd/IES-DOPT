var documenterSearchIndex = {"docs":
[{"location":"assets/静态仿真/顺流逆流换热器仿真/代码/顺逆流换热器部分代码/","page":"-","title":"-","text":"function heat_exchanger!(du,u,p,t)\n\t\t#比热容\n\t\tCp_h = CoolProp.PropsSI(\"C\", \"T\", u[1], \"P\", p[3],p[4])\n\t\tCp_c = CoolProp.PropsSI(\"C\", \"T\", u[2], \"P\", p[3],p[9])\n\t\t#计算动态粘度\n\t\tμ_h = CoolProp.PropsSI(\"V\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tμ_c = CoolProp.PropsSI(\"V\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\t#计算普朗特数\n\t\tPr_h = CoolProp.PropsSI(\"Prandtl\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tPr_c = CoolProp.PropsSI(\"Prandtl\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\t#计算雷诺数\n\t\tRe_h = 4*p[1]/p[6]/μ_h/π\n\t\tRe_c = 4*p[2]/p[7]/μ_c/π\n\n\t\t#计算努塞尔数\n\t\tif Re_c > 10000\n\t\t\tNu_c = 0.023*(Re_c^0.8)*(Pr_c^0.4)\n\t\telse\n\t\t\tNu_c = 4.36\n\t\tend\n\t\tif Re_h > 10000\n\t\t\tNu_h = 0.023*(Re_h^0.8)*(Pr_h^0.3)\n\t\telse\n\t\t\tNu_h = 4.36\n\t\tend\n\n\t\t#计算传热系数\n\t\tk_h = CoolProp.PropsSI(\"L\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tk_c = CoolProp.PropsSI(\"L\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\tη_h = Nu_h*k_h/p[6]\n\t\tη_c = Nu_c*k_c/p[7]\n\t\t#计算传热系数U\n\t\tU = (1/η_h+1/η_c)^(-1)\n\t\t#计算热传导方程 [1]为热流 [2]为冷流\n\t\tdu[1] = U*π*p[6]*(u[2]-u[1])/(Cp_h*p[1])\n\t\tif Flow_type == \"parallel\"\n\t\t\tdu[2] = U*π*p[7]*(u[1]-u[2])/(Cp_c*p[2])\n\t\telseif Flow_type == \"countercurrent\"\n\t\t\tdu[2] = -U*π*p[7]*(u[1]-u[2])/(Cp_c*p[2])\n\t\tend\n\tend","category":"page"},{"location":"Optimization/离网制氢/#离网制氢","page":"离网制氢","title":"离网制氢","text":"","category":"section"},{"location":"Optimization/离网制氢/#简介","page":"离网制氢","title":"简介","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"用户根据如能源供应、负载需求以及储氢容量等约束条件构建能源系统对应的约束场景。输入风光资源数据，设定能源需求和运营等参数后，点击优化按钮，通过算法模拟计算 即可得到风光环境图、系统小时运行图以及经济分析表等结果，以此来分析不同技术方案的成本、效率、能量损失等关键指标，并推导出最佳的设备容量配置。确保该综合能源系统在满足需求的同时，最大程度地减少成本或资源消耗。","category":"page"},{"location":"Optimization/离网制氢/#离网制氢系统图","page":"离网制氢","title":"离网制氢系统图","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#离网制氢系统运行逻辑图","page":"离网制氢","title":"离网制氢系统运行逻辑图","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#平台操作方法及输入输出","page":"离网制氢","title":"平台操作方法及输入输出","text":"","category":"section"},{"location":"Optimization/离网制氢/#输入","page":"离网制氢","title":"输入","text":"","category":"section"},{"location":"Optimization/离网制氢/#.地区选择","page":"离网制氢","title":"1.地区选择","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"如下图所示，导航栏中选择所要进行设计优化的地区，从而在后台可以导入当地的风光资源信息。","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#.经济参数设置","page":"离网制氢","title":"2.经济参数设置","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"可输入系统的总运行天数以及氢气、天然气的相关价格。","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#.优化目标选择","page":"离网制氢","title":"3.优化目标选择","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"可选择如下图的三个优化目标中的其中一个为目标函数进行求解。","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#.选择求解器","page":"离网制氢","title":"4.选择求解器","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"如下图的求解器对应的为黑箱优化算法的不同寻优方式，可能会导致所优化求解的结果不相同。","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#.选择待优化容量参数","page":"离网制氢","title":"5.选择待优化容量参数","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"即保持除所选优化容量参数以外的参数只对待优化容量参数进行求解变动","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#.设备型号选择","page":"离网制氢","title":"6.设备型号选择","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"（以风机为例，除风机外还有光伏板、汽轮机、整流器、压缩空气储能、电解槽、氢气压缩机、储氢罐等设备）","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"可选择如下图两种不同型号参数的设备，同时可对机组数量进行设置。","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"点击显示参数的蓝色按钮，即可查看当前所选设备的详细参数。","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#输出","page":"离网制氢","title":"输出","text":"","category":"section"},{"location":"Optimization/离网制氢/#.风光环境图输出","page":"离网制氢","title":"1.风光环境图输出","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"将辐射强度和风速以连续平滑曲线绘制出（支持日数据与周数据查看模式切换） (Image: img)","category":"page"},{"location":"Optimization/离网制氢/#.系统小时运行图输出","page":"离网制氢","title":"2.系统小时运行图输出","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"可将风力发电、光伏发电、内燃机发电功率以每小时为最小单位统一绘制在同一张图上。（支持日数据与周数据查看模式切换如下图所示）","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#.制氢图输出","page":"离网制氢","title":"3.制氢图输出","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"可将系统以每小时为最小时间单位所制氢量绘制在图中（支持日数据与周数据查看模式切换如下图所示） (Image: img)","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#.规模与经济性表的输出","page":"离网制氢","title":"4.规模与经济性表的输出","text":"","category":"section"},{"location":"Optimization/离网制氢/#情况一：每方氢气成本最低为优化目标","page":"离网制氢","title":"情况一：每方氢气成本最低为优化目标","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"第一行为仿真结果，第二行为优化结果。观察到优化后每方氢气成本下降 31.1%","category":"page"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"(Image: img)","category":"page"},{"location":"Optimization/离网制氢/#情况二：投资成本限制最大值情况下氢气量产能最大","page":"离网制氢","title":"情况二：投资成本限制最大值情况下氢气量产能最大","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"第一行为仿真结果，第二行为优化结果。观察到优化后成本不变 制氢量提升 13.3% (Image: img)","category":"page"},{"location":"Optimization/离网制氢/#情况三：制氢量限制最小值的情况下总投资成本最低","page":"离网制氢","title":"情况三：制氢量限制最小值的情况下总投资成本最低","text":"","category":"section"},{"location":"Optimization/离网制氢/","page":"离网制氢","title":"离网制氢","text":"第一行为仿真结果，第二行为优化结果。观察到优化后最小制氢量总成本减少 2.93% (Image: img)","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#PID-控制仿真实验","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/#简介","page":"PID 控制仿真实验","title":"简介","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"该部分通过调节和优化参数，对不同参数组合的仿真结果进行比较，评估 PID（比例-积分-微分）控制器在系统中的性能表现，包括稳态误差、响应时间、抗干扰能力等指标，以找到最佳的 PID 控制器参数，实现更好的控制效果，提高系统的控制精度和稳定性。","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#操作演示","page":"PID 控制仿真实验","title":"操作演示","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"(Image: )","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"PID 控制仿真基于自动控制原理，利用 Julia 语言对典型的 PID 控制环节进行了建模，并创建了基于该控制器的，控制对象为无自平衡能力系统的二输入(控制，扰动)单输出自动控制系统。同时利用状态空间法进行求解，并进行了可视化处理。","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#PID-控制器的系统原理图","page":"PID 控制仿真实验","title":"PID 控制器的系统原理图","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"(Image: )","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"用户在仿真软件中选择控制系统仿真模块，并进入设置界面。通过调整 PID 控制器的参数（包括理想 PID 参数和实际 PID 参数）以及其他控制器参数，对系统进行优化。设置完成之后，用户可以点击软件界面上的开始按钮，启动控制系统的仿真过程。仿真软件将模拟系统的动态响应，并输出相应的结果。","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#PID-控制结果仿真图","page":"PID 控制仿真实验","title":"PID 控制结果仿真图","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"(Image: )","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"(Image: )","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"(Image: 实际PID控制响应图)","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"(Image: 实际PID扰动响应图)","category":"page"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"此仿真通过调节 PID 控制器的参数，有助于用户探究不同控制参数以及不同输入(阶跃形式，幅值可调)对该系统稳定性，快速性及准确性的影响，并形成对 PID 控制的感性认知，以及对各控制参数产生的影响的定性理解，从而优化 PID 控制器的参数配置，提高系统的控制性能，实现系统的稳定控制，并预测系统在不同工况下的稳定性。","category":"page"},{"location":"Static_simulation/PID控制仿真实验/#部分代码","page":"PID 控制仿真实验","title":"部分代码","text":"","category":"section"},{"location":"Static_simulation/PID控制仿真实验/","page":"PID 控制仿真实验","title":"PID 控制仿真实验","text":"\"\"\"\n生成控制器传递函数\n\"\"\"\nfunction transfer_function(x::IdealPid)\n    if x.T1 == 0 && x.T2 != 0\n        # PD控制\n        return Polynomial1([x.K, x.K * x.T2])\n    elseif x.T2 == 0 && x.T1 != 0\n        # PI控制\n        return Fraction1([x.K, x.K * x.T1], [0, x.T1])\n    else\n        # PID控制\n        return Fraction1([x.K, x.K * x.T1, x.K * x.T1 * x.T2], [0, x.T1])\n    end\nend\nfunction transfer_function(x::ActualPid)\n    i = Fraction1([1], [0, x.T1])\n    d = Fraction1([0, x.k2 * x.T2], [1, x.T2])\n    if x.T1 == 0 && x.T2 != 0\n        # PD控制\n        return x.K * (1 + d)\n    elseif x.T2 == 0 && x.T1 != 0\n        # PI控制\n        return x.K * (1 + i)\n    else\n        # PID控制\n        return x.K * (1 + i + d)\n    end\nend\n\n\"\"\"\n单位正阶跃函数\n\"\"\"\nfunction positive_step(t; τ₀=0.0)\n    if t <= τ₀\n        return 0\n    else\n        return 1\n    end\nend","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#顺流与逆流式换热器仿真","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#简介","page":"顺流与逆流式换热器仿真","title":"简介","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"该部分支持套管式换热器在顺流与逆流两种流态下的仿真。通过用户输入换热器的长度、介质种类、冷热流入口温度、流量等参数，计算出冷热流体不同位置的温度值以及整体换热效率等信息，用户能更直观地了解到换热器的换热情况，并调整真实模型的相关参数，从而提高换热器效率。此仿真过程将换热原理与 ODE 结合，使模型更精准。","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#操作演示","page":"顺流与逆流式换热器仿真","title":"操作演示","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#顺流逆流换热器系统模型图","page":"顺流与逆流式换热器仿真","title":"顺流逆流换热器系统模型图","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"用户在仿真软件中选择换热器模块，并进入设置界面，从下拉菜单中选择热流体的类型（液态水、空气）并输入相关参数（冷热流体流量、换热管长度等），最后点击软件界面上的开始按钮，启动套管式换热器的仿真过程。","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#仿真结果图","page":"顺流与逆流式换热器仿真","title":"仿真结果图","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#仿真参数输出","page":"顺流与逆流式换热器仿真","title":"仿真参数输出","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"软件将计算并生成热流与冷流的温度随距入口大小变化的 T-X 图以及包含换热效率、热流雷诺数等参数的结果输出表。用户可以通过这些结果图来评估换热器的性能和工作状态。","category":"page"},{"location":"Static_simulation/顺流与逆流式换热器仿真/#部分代码","page":"顺流与逆流式换热器仿真","title":"部分代码","text":"","category":"section"},{"location":"Static_simulation/顺流与逆流式换热器仿真/","page":"顺流与逆流式换热器仿真","title":"顺流与逆流式换热器仿真","text":"function heat_exchanger!(du,u,p,t)\n\t\t#比热容\n\t\tCp_h = CoolProp.PropsSI(\"C\", \"T\", u[1], \"P\", p[3],p[4])\n\t\tCp_c = CoolProp.PropsSI(\"C\", \"T\", u[2], \"P\", p[3],p[9])\n\t\t#计算动态粘度\n\t\tμ_h = CoolProp.PropsSI(\"V\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tμ_c = CoolProp.PropsSI(\"V\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\t#计算普朗特数\n\t\tPr_h = CoolProp.PropsSI(\"Prandtl\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tPr_c = CoolProp.PropsSI(\"Prandtl\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\t#计算雷诺数\n\t\tRe_h = 4*p[1]/p[6]/μ_h/π\n\t\tRe_c = 4*p[2]/p[7]/μ_c/π\n\n\t\t#计算努塞尔数\n\t\tif Re_c > 10000\n\t\t\tNu_c = 0.023*(Re_c^0.8)*(Pr_c^0.4)\n\t\telse\n\t\t\tNu_c = 4.36\n\t\tend\n\t\tif Re_h > 10000\n\t\t\tNu_h = 0.023*(Re_h^0.8)*(Pr_h^0.3)\n\t\telse\n\t\t\tNu_h = 4.36\n\t\tend\n\n\t\t#计算传热系数\n\t\tk_h = CoolProp.PropsSI(\"L\", \"T\", u[1], \"P\", p[3], p[4])\n\t\tk_c = CoolProp.PropsSI(\"L\", \"T\", u[2], \"P\", p[3], p[9])\n\n\t\tη_h = Nu_h*k_h/p[6]\n\t\tη_c = Nu_c*k_c/p[7]\n\t\t#计算传热系数U\n\t\tU = (1/η_h+1/η_c)^(-1)\n\t\t#计算热传导方程 [1]为热流 [2]为冷流\n\t\tdu[1] = U*π*p[6]*(u[2]-u[1])/(Cp_h*p[1])\n\t\tif Flow_type == \"parallel\"\n\t\t\tdu[2] = U*π*p[7]*(u[1]-u[2])/(Cp_c*p[2])\n\t\telseif Flow_type == \"countercurrent\"\n\t\t\tdu[2] = -U*π*p[7]*(u[1]-u[2])/(Cp_c*p[2])\n\t\tend\n\tend","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#蒸汽动力循环仿真","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/#简介","page":"蒸汽动力循环仿真","title":"简介","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"该部分支持三个循环（包括朗肯循环、再热循环以及制冷循环）模式的仿真。通过用户输入的参数（如冷凝器冷却压力、锅炉出口温度等），计算出整个循环过程中温度、压力、焓、熵等参数。同时，该部分使用单独描述系统中每个组件并连接在一起的组件化建模方法，极大地提高了建模的效率。用户可以据此比较不同循环参数和组件配置对性能的影响，优化循环设计，并找到达到最佳性能的操作条件。","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#操作演示","page":"蒸汽动力循环仿真","title":"操作演示","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#三个循环仿真","page":"蒸汽动力循环仿真","title":"三个循环仿真","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/#.朗肯循环","page":"蒸汽动力循环仿真","title":"1.朗肯循环","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/#朗肯循环模型图","page":"蒸汽动力循环仿真","title":"朗肯循环模型图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#结果仿真图","page":"蒸汽动力循环仿真","title":"结果仿真图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#.再热循环","page":"蒸汽动力循环仿真","title":"2.再热循环","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"以再热循环为例，使用者可以根据实际系统特点和需求选择适当的模式。用户需要输入相关的仿真参数，包括冷凝器冷却压力、水泵供给压力等数据。之后，用户可以根据需要设置再热循环系统的运行条件和约束条件。","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#再热循环模型图","page":"蒸汽动力循环仿真","title":"再热循环模型图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"在设置完毕后，用户点击仿真软件中的开始按钮，启动再热循环系统的仿真过程。仿真软件将根据设定的参数和条件，模拟再热循环系统在不同工况下的运行情况，最终输出结果图与包含汽轮机入口压力、汽轮机出入口温度、锅炉入口温度以及锅炉出入口压力等参数的结果输出表。","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#结果仿真图-2","page":"蒸汽动力循环仿真","title":"结果仿真图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"用户可以通过生成的 T-S 结果图了解再热循环系统的运行状态，并评估其性能和效率。使用者也可以通过改变锅炉、汽轮机、冷凝器等组件的设计参数对系统进行人工优化，例如优化循环的热能转换效率和降低能量损失。还可以通过调整工作流体的参数，如温度、压力和流量等，来提高系统的整体效率。","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#.制冷循环","page":"蒸汽动力循环仿真","title":"3.制冷循环","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/#制冷循环模型图","page":"蒸汽动力循环仿真","title":"制冷循环模型图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#结果仿真图-3","page":"蒸汽动力循环仿真","title":"结果仿真图","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/蒸汽动力循环仿真/#部分代码","page":"蒸汽动力循环仿真","title":"部分代码","text":"","category":"section"},{"location":"Static_simulation/蒸汽动力循环仿真/","page":"蒸汽动力循环仿真","title":"蒸汽动力循环仿真","text":"function reheat_rankine(冷凝器冷却压力,\n                        水泵供给压力,\n                        锅炉出口温度,\n                        再热器出口温度,\n                        汽轮机一级出口压力,\n\t\t\t\t\t\t工质)\n\n    冷凝器冷却压力 = 冷凝器冷却压力 isa Number ? 冷凝器冷却压力 : parse(Float64,冷凝器冷却压力)\n    水泵供给压力 = 水泵供给压力 isa Number ? 水泵供给压力 : parse(Float64,水泵供给压力)\n    锅炉出口温度 = 锅炉出口温度 isa Number ? 锅炉出口温度 : parse(Float64,锅炉出口温度)\n    再热器出口温度 = 再热器出口温度 isa Number ? 再热器出口温度 : parse(Float64,再热器出口温度)\n    汽轮机一级出口压力 = 汽轮机一级出口压力 isa Number ? 汽轮机一级出口压力 : parse(Float64,汽轮机一级出口压力)\n\n    #创建组件...\n    @named pump = Pump(P = 水泵供给压力,fluid = 工质)\n    @named boiler = Boiler(T = 锅炉出口温度,fluid = 工质)\n    @named turbine = Turbine(P = 汽轮机一级出口压力,fluid = 工质)\n    @named reboiler = Boiler(T = 再热器出口温度,fluid = 工质)\n    @named returbine = Turbine(P = 冷凝器冷却压力,fluid = 工质)\n    @named condenser = Condenser(fluid = 工质)\n\n    #构建连接关系\n    rc_eqs = [\n      connect(pump.out, boiler.in)\n      connect(boiler.out, turbine.in)\n      connect(turbine.out, reboiler.in)\n      connect(reboiler.out, returbine.in)\n      connect(returbine.out, condenser.in)\n      connect(condenser.out, pump.in)\n      D(x) ~ 0\n    ]\n    @named _rc_model = ODESystem(rc_eqs, t0) #连接关系也需要放到ODESystem中\n\n    # 组件与组件连接关系一起构建系统\n    @named rc_model = compose(_rc_model,[turbine, condenser , pump, boiler,reboiler,returbine ])\n\n    # 系统化简\n    sys = structural_simplify(rc_model)\n    equations(sys) # 查看方程\n    # 求解\n    prob = ODAEProblem(sys, [0], (0, 0.0))\n    sol = solve(prob)\n\n    #println(sol)\n    table = OrderedDict(\"汽轮机一级入口压力(pa)\" => sol[turbine.in.p][1],\n    \"汽轮机一级入口温度(k)\" => sol[turbine.in.t][1],\n    \"汽轮机一级出口温度(k)\" => sol[turbine.out.t][1],\n    \"汽轮机一级出口熵(J/(mol*k))\" => sol[turbine.out.s][1],\n    \"锅炉入口温度(k)\"=> sol[boiler.in.t][1],\n    \"锅炉出口压力(pa)\"=> sol[boiler.out.p][1],\n    \"锅炉入口压力(pa)\"=> sol[boiler.in.p][1])\n\n    plot_sys = [pump, boiler, turbine, reboiler, returbine, condenser];\n    propx = :s\n    propy = :t\n\n    ss = [sol[getproperty(i.out, propx)][1] for i in plot_sys]\n    tt = [sol[getproperty(i.out, propy)][1] for i in plot_sys]\n\n    xAxis = collect(range(ss[1], ss[2], 15))\n    yAxis = CoolProp.PropsSI.(\"T\", \"P\", sol[pump.out.p], \"S\", collect(range(ss[1], ss[2], 15)), 工质)\n\n    append!(xAxis, collect(range(ss[2], ss[3], 15)))\n    append!(yAxis,collect(range(tt[2], tt[3], 15)))\n\n    append!(xAxis,collect(range(ss[3], ss[4], 15)))\n    append!(yAxis,CoolProp.PropsSI.(\"T\", \"P\", sol[reboiler.out.p], \"S\", collect(range(ss[3], ss[4], 15)), 工质))\n\n    append!(xAxis,collect(range(ss[4], ss[5], 15)))\n    append!(yAxis,collect(range(tt[4], tt[5], 15)))\n\n    append!(xAxis,collect(range(ss[5], ss[6], 15)))\n    append!(yAxis,collect(range(tt[5], tt[6], 15)))\n\n    append!(xAxis,collect(range(ss[6], ss[1], 15)))\n    append!(yAxis,collect(range(tt[6], tt[1], 15)))\n    # println(xAxis)\n    # println(yAxis)\n    figure = transposeMatrix(xAxis, yAxis)\n    #在本地绘图\n    plot_local(figure)\n    return figure,table\nend","category":"page"},{"location":"Dynamic_simulation/Jumulink/#Jumulink","page":"Jumulink","title":"Jumulink","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/#项目概述","page":"Jumulink","title":"项目概述","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"本项目基于 Julia 语言开发，以自动控制原理相关理论为基础，对标 MATLAB 进行设计。初步实现了对于以传递函数描述的线性系统的描述，建模，求解与结果的可视化，致力于提供一个交互式的图形化环境及可定制模块库，可对各种时变系统，例如通讯、控制、信号处理、影像处理和图像处理系统等进行设计、模拟、执行和测试，也可以进行基于模型的设计。","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: 14)","category":"page"},{"location":"Dynamic_simulation/Jumulink/#操作演示","page":"Jumulink","title":"操作演示","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: 14)","category":"page"},{"location":"Dynamic_simulation/Jumulink/#原理介绍","page":"Jumulink","title":"原理介绍","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/#单输入单输出线性系统","page":"Jumulink","title":"单输入单输出线性系统","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"对于单输入单输出的线性系统,以传递函数描述其行为,传递函数的表达式为:","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"其中ngeq m, Y(s)为系统输出, U(s)为系统输入.采用直接分解法获取状态空间,有:","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"其中A_1为状态方程矩阵, B_1为输入方程矩阵, C_1为输出方程矩阵, D_1为直接传递矩阵.","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"当 m=n时：","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"当 mn时：","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: alt text) (Image: alt text) (Image: alt text)","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"借助 Julia 语言优秀的符号处理与运算机制,我们先定义了多项式,分式等数学结构,并进一步定义它们的四则混合运算.于是就可以很轻松地定义一个传递函数.并通过它的多项式系数获取它的状态空间.并基于状态空间对线性系统进行求解.关于常系数线性常微分方程组的求解,我们使用了 Julia 的开源求解包:DifferentialEquationsjl进行求解.","category":"page"},{"location":"Dynamic_simulation/Jumulink/#多输入多输出线性系统","page":"Jumulink","title":"多输入多输出线性系统","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"对于多输入多输出的线性系统,有传递矩阵描述其行为,传递矩阵的表达式为:","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"其中G_ij(s)为第i个输出与第j个输入的传递函数.根据线性微分方程的叠加性,所以,多输入多输出线性系统的每一个输出便可由它关于每一个输入的输出叠加得到.我们利用 2.1 中对单输入单输出线性系统的处理,就能得到多输入多输出线性系统的解.","category":"page"},{"location":"Dynamic_simulation/Jumulink/#设计思路","page":"Jumulink","title":"设计思路","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"我们采用了与 SimuLink 类似的可拖拉拽的 GUI 进行系统的建模,这一行为本身就与控制系统方框图相呼应.于是,自然而然地,我们采用梅森公式来获取传递函数.","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"梅森公式：","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: )","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"用户在 GUI 中通过拖拽的形式摆放,连接系统组件,我们采用邻接矩阵来储存连接信息.并规定,以矩阵的行表示连接的起点,矩阵的列表示连接的终点.因而,第i个组件与第j个组件的连接就对应于邻接矩阵的第i行第j列的元素等于 1,否则等于 0.此外,对于和点处的+与-,我们规定+为 1, -为-1.这样,基于邻接矩阵,并利用回溯的寻路算法,我们就可以获取任意一对输入与输出间的前向通道,系统的闭合回路等用于梅森公式计算传递函数的元素,进而计算传递函数.并得到系统的传递矩阵和状态空间,然后得出线性系统的解.并进行可视化分析.","category":"page"},{"location":"Dynamic_simulation/Jumulink/#设计实现","page":"Jumulink","title":"设计实现","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"与 MATLAB 不同的是,我们的项目是基于前后端分离思想的网络应用程序.\n1.使用Vue3+TypeScript+Axios进行拖拉拽网页前端的设计与构建.\n2.使用自行编写的多项式运算与分式运算库,并结合 3 中所述梅森公式的算法求得传递函数.\n3.利用直接分解法求得状态空间,获得系统的微分方程组.\n4.利用DifferentialEquationsjl求解线性系统的解.\n5.最后通过Oxygenjl实现Julia后端与前端网页的数据交互.\n作为网络程序当然也就具有便捷性与跨平台性.","category":"page"},{"location":"Dynamic_simulation/Jumulink/#设计内容","page":"Jumulink","title":"设计内容","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"目前我们构建了:","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"基本的传递函数组件:以向量形式,按从左到右升幂的形式表达多项式的系数.","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: 7)","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"零极点形式的传递函数组件:以向量的形式表达系统的零点与极点.","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: 11)","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"比例环节:可以设置比例系数.\nG(s)=K\n(Image: 6)\n积分环节:可以设置积分时间常数.\nG(s)=frac1T_is\n(Image: 9)\n理想微分环节:可以设置微分时间常数.\nG(s)=T_ds\n实际微分环节:可以设置微分时间常数与比例系数.\nG(s)=frackT_ds1+T_ds\n(Image: 10)\n和点:支持最大 3 端的输入加减求和,可以变更每一端的符号.\n和块:与 MATLAB 类似,支持最大 5 端的输入加减求和,可以变更每一端的符号.","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: 8)","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"等基本系统组件.","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"设计了包含三种经典系统输入(阶跃,斜坡,抛物线)的系统输入组件,以及用于可视化的示波器组件.","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: 12)","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"(Image: 13)","category":"page"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"当然,基于我们的架构也可以添加更多组件.这也说明我们的架构是可扩展的,完备的.\n此外,后端当然也可以单独分离出来,借助Julia交互式终端实现类似于 MATLAB 命令行输入的交互方式.","category":"page"},{"location":"Dynamic_simulation/Jumulink/#设计总结","page":"Jumulink","title":"设计总结","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"总的来讲,本项目立足于所学知识,结合了前端与后端的设计思想,并结合了 Julia 语言的优秀特性,构建了基于前端拖拽的线性系统建模与求解的网络程序.\n一方面是对理论的实践,加深了对控制系统的描述与理解,另一方面提高了解决问题的能力.","category":"page"},{"location":"Dynamic_simulation/Jumulink/#部分代码","page":"Jumulink","title":"部分代码","text":"","category":"section"},{"location":"Dynamic_simulation/Jumulink/","page":"Jumulink","title":"Jumulink","text":"\"\"\"\n测试模块,定义了符号运算用以测试传函模块的正确性\n\"\"\"\nstruct Add\n    f::Symbol\n    l::Vector\n    r::Vector\nend\n\nstruct Tfs\n    n::Vector\n    d::Vector\nend\n\n\nBase.:*(x::Tfs, y::Tfs) = Tfs([x.n; y.n], [x.d; y.d])\nBase.:*(x::Tfs, y::Number) = Tfs([x.n; y], x.d)\nBase.:*(x::Number, y::Tfs) = y * x\nfunction Base.:*(x::Tfs...)\n    j = 1\n    for k in x\n        j *= k\n    end\n    return j\nend\nBase.:+(x::Tfs, y::Tfs) = Tfs([Add(:+, [x.n; y.d], [x.d; y.n])], [x.d; y.d])\nBase.:+(x::Tfs, y::Number) = Tfs([Add(:+, x.n, y * x.d)], x.d)\nBase.:+(x::Number, y::Tfs) = y + x\nBase.:/(x::Tfs, y::Tfs) = Tfs([x.n; y.d], [x.d; y.n])\nBase.:/(x::Tfs, y::Number) = Tfs(x.n, [y; x.d])\nBase.:/(x::Number, y::Tfs) = Tfs([x; y.d], y.n)\n\nfunction arrange(x::Vector)\n    n = [1]\n    s = []\n    a = []\n    for i = 1:length(x)\n        if x[i] isa Number\n            push!(n, x[i])\n        elseif x[i] isa Symbol\n            push!(s, x[i])\n        else\n            push!(a, x[i])\n        end\n    end\n    n = *(n...)\n    if n == 1\n        return [s; a]\n    else\n        return [n; s; a]\n    end\nend\n\nfunction Base.show(io::IO, x::Add)\n    l = arrange(x.l)\n    r = arrange(x.r)\n    print(io, \"($(l...) $(x.f) $(r...))\")\n    nothing\nend\n\nfunction Base.show(io::IO, x::Tfs)\n    n = arrange(x.n)\n    d = arrange(x.d)\n    println(io, \"$(n...)\")\n    println(io, repeat(\"-\", length(d) * 6))\n    println(io, \"$(d...)\")\n    nothing\nend","category":"page"},{"location":"assets/静态仿真/文丘里管/代码/文丘里管部分代码/","page":"-","title":"-","text":"function simulation_Venturi_Meter(; Q,  friction::Bool = false, Media::String = \"Water\")\n  Q = Q isa Number ? Q : parse(Float64, Q)\n\n  #参数\n  d = 0.1 #喉管直径\n  D = 0.2 #直径\n  T = 273.15 + 25 #温度\n  P0 = 0.1*1e5 #压力\n  ρ = PropsSI(\"D\", \"T\", T, \"P\", P0, Media) #密度\n  g = 9.8 #重力加速度\n  function ΔP(x)\n    if friction\n      if 0<= x< 0.2\n        return 0\n      elseif 0.2<= x< 0.4\n        return (0.5*ρ*(Q/(π*D^2/4))^2*0.04)*(x-0.2)/0.2\n      elseif 0.4<= x< 0.6\n        return 0.5*ρ*(Q/(π*D^2/4))^2*0.04\n      elseif 0.6<= x< 0.8\n        return 0.5*ρ*(Q/(π*D^2/4))^2*(0.04+0.45*(x-0.6)/0.2)\n      elseif 0.8<= x<= 1.0\n        return 0.5*ρ*(Q/(π*D^2/4))^2*(0.04+0.45)\n      end\n    else\n      return 0\n    end\n  end\n\n  p = [d, D, P0, ρ, g]\n\n  function h_column(x,p)\n    d_x = 0\n    if 0<= x< 0.2\n      d_x = p[2]\n    elseif 0.2<= x< 0.4\n      d_x = p[2]-(p[2]-p[1])/0.2*(x-0.2)\n    elseif 0.4<= x< 0.6\n      d_x = p[1]\n    elseif 0.6<= x< 0.8\n      d_x = p[1]+(p[2]-p[1])/0.2*(x-0.6)\n    elseif 0.8<= x<= 1.0\n      d_x = p[2]\n    end\n    V = Q/(π*d_x^2/4)\n    P = 1/2*p[4]*(Q/(π*p[2]^2/4))^2 + p[3] - (1/2*p[4]*V^2 + ΔP(x))\n    h = P/p[4]/p[5]\n  end\n\n  # 计算 h_column 函数的值\n  function calculate_values(p)\n    x_values = 0:0.01:1\n    return [h_column(x, p) for x in x_values]\n  end\n\n  # 绘制图像\n  x_values = 0:0.01:1\n  y_values = calculate_values(p)\n  figure = transposeMatrix(x_values, y_values)\n\n  return figure\nend","category":"page"},{"location":"assets/静态仿真/PID控制实验/代码/PID部分代码/","page":"-","title":"-","text":"\"\"\"\n生成控制器传递函数\n\"\"\"\nfunction transfer_function(x::IdealPid)\n    if x.T1 == 0 && x.T2 != 0\n        # PD控制\n        return Polynomial1([x.K, x.K * x.T2])\n    elseif x.T2 == 0 && x.T1 != 0\n        # PI控制\n        return Fraction1([x.K, x.K * x.T1], [0, x.T1])\n    else\n        # PID控制\n        return Fraction1([x.K, x.K * x.T1, x.K * x.T1 * x.T2], [0, x.T1])\n    end\nend\nfunction transfer_function(x::ActualPid)\n    i = Fraction1([1], [0, x.T1])\n    d = Fraction1([0, x.k2 * x.T2], [1, x.T2])\n    if x.T1 == 0 && x.T2 != 0\n        # PD控制\n        return x.K * (1 + d)\n    elseif x.T2 == 0 && x.T1 != 0\n        # PI控制\n        return x.K * (1 + i)\n    else\n        # PID控制\n        return x.K * (1 + i + d)\n    end\nend\n\n\"\"\"\n单位正阶跃函数\n\"\"\"\nfunction positive_step(t; τ₀=0.0)\n    if t <= τ₀\n        return 0\n    else\n        return 1\n    end\nend\n","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#文丘里管压力仿真","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/#简介","page":"文丘里管压力仿真","title":"简介","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"该部分利用了伯努利原理对不同参数（如流量、有无摩擦、介质种类等参数）下文丘里管压力分布进行仿真模拟。通过用户输入的不同参数，可以模拟在该参数约束下文丘里管的状态，从而使用户更直观地了解其压力分布情况。","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#操作演示","page":"文丘里管压力仿真","title":"操作演示","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#文丘里管系统原理图","page":"文丘里管压力仿真","title":"文丘里管系统原理图","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"用户可以在仿真软件中选择文丘里管压力仿真模式（是否考虑摩擦阻力）。进入设置界面，选择介质种类（如水、空气），输入流量。设置完成之后，用户可以点击软件界面上的开始按钮，启动控制系统的仿真过程。仿真软件将模拟系统的动态响应，最终得到直观的文丘里管压力分布图。","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#结果仿真图","page":"文丘里管压力仿真","title":"结果仿真图","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"(Image: )","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"参考结果图，用户可以了解在此设置条件下管道中不同位置的压力分布情况。通过调整介质种类、体积流量等参数，用户还可以模拟不同工况下的压力情况，并优化管道设计以满足特定的需求。","category":"page"},{"location":"Static_simulation/文丘里管压力仿真/#部分代码","page":"文丘里管压力仿真","title":"部分代码","text":"","category":"section"},{"location":"Static_simulation/文丘里管压力仿真/","page":"文丘里管压力仿真","title":"文丘里管压力仿真","text":"function simulation_Venturi_Meter(; Q,  friction::Bool = false, Media::String = \"Water\")\n  Q = Q isa Number ? Q : parse(Float64, Q)\n\n  #参数\n  d = 0.1 #喉管直径\n  D = 0.2 #直径\n  T = 273.15 + 25 #温度\n  P0 = 0.1*1e5 #压力\n  ρ = PropsSI(\"D\", \"T\", T, \"P\", P0, Media) #密度\n  g = 9.8 #重力加速度\n  function ΔP(x)\n    if friction\n      if 0<= x< 0.2\n        return 0\n      elseif 0.2<= x< 0.4\n        return (0.5*ρ*(Q/(π*D^2/4))^2*0.04)*(x-0.2)/0.2\n      elseif 0.4<= x< 0.6\n        return 0.5*ρ*(Q/(π*D^2/4))^2*0.04\n      elseif 0.6<= x< 0.8\n        return 0.5*ρ*(Q/(π*D^2/4))^2*(0.04+0.45*(x-0.6)/0.2)\n      elseif 0.8<= x<= 1.0\n        return 0.5*ρ*(Q/(π*D^2/4))^2*(0.04+0.45)\n      end\n    else\n      return 0\n    end\n  end\n\n  p = [d, D, P0, ρ, g]\n\n  function h_column(x,p)\n    d_x = 0\n    if 0<= x< 0.2\n      d_x = p[2]\n    elseif 0.2<= x< 0.4\n      d_x = p[2]-(p[2]-p[1])/0.2*(x-0.2)\n    elseif 0.4<= x< 0.6\n      d_x = p[1]\n    elseif 0.6<= x< 0.8\n      d_x = p[1]+(p[2]-p[1])/0.2*(x-0.6)\n    elseif 0.8<= x<= 1.0\n      d_x = p[2]\n    end\n    V = Q/(π*d_x^2/4)\n    P = 1/2*p[4]*(Q/(π*p[2]^2/4))^2 + p[3] - (1/2*p[4]*V^2 + ΔP(x))\n    h = P/p[4]/p[5]\n  end\n\n  # 计算 h_column 函数的值\n  function calculate_values(p)\n    x_values = 0:0.01:1\n    return [h_column(x, p) for x in x_values]\n  end\n\n  # 绘制图像\n  x_values = 0:0.01:1\n  y_values = calculate_values(p)\n  figure = transposeMatrix(x_values, y_values)\n\n  return figure\nend","category":"page"},{"location":"assets/静态仿真/蒸汽动力循环仿真/代码/蒸汽动力循环部分代码/","page":"-","title":"-","text":"function reheat_rankine(冷凝器冷却压力,\n                        水泵供给压力,\n                        锅炉出口温度,\n                        再热器出口温度,\n                        汽轮机一级出口压力,\n\t\t\t\t\t\t工质)\n\n    冷凝器冷却压力 = 冷凝器冷却压力 isa Number ? 冷凝器冷却压力 : parse(Float64,冷凝器冷却压力)\n    水泵供给压力 = 水泵供给压力 isa Number ? 水泵供给压力 : parse(Float64,水泵供给压力)\n    锅炉出口温度 = 锅炉出口温度 isa Number ? 锅炉出口温度 : parse(Float64,锅炉出口温度)\n    再热器出口温度 = 再热器出口温度 isa Number ? 再热器出口温度 : parse(Float64,再热器出口温度)\n    汽轮机一级出口压力 = 汽轮机一级出口压力 isa Number ? 汽轮机一级出口压力 : parse(Float64,汽轮机一级出口压力)\n\n    #创建组件...\n    @named pump = Pump(P = 水泵供给压力,fluid = 工质)\n    @named boiler = Boiler(T = 锅炉出口温度,fluid = 工质)\n    @named turbine = Turbine(P = 汽轮机一级出口压力,fluid = 工质)\n    @named reboiler = Boiler(T = 再热器出口温度,fluid = 工质)\n    @named returbine = Turbine(P = 冷凝器冷却压力,fluid = 工质)\n    @named condenser = Condenser(fluid = 工质)\n\n    #构建连接关系\n    rc_eqs = [\n      connect(pump.out, boiler.in)\n      connect(boiler.out, turbine.in)\n      connect(turbine.out, reboiler.in)\n      connect(reboiler.out, returbine.in)\n      connect(returbine.out, condenser.in)\n      connect(condenser.out, pump.in)\n      D(x) ~ 0\n    ]\n    @named _rc_model = ODESystem(rc_eqs, t0) #连接关系也需要放到ODESystem中\n\n    # 组件与组件连接关系一起构建系统\n    @named rc_model = compose(_rc_model,[turbine, condenser , pump, boiler,reboiler,returbine ])\n\n    # 系统化简\n    sys = structural_simplify(rc_model)\n    equations(sys) # 查看方程\n    # 求解\n    prob = ODAEProblem(sys, [0], (0, 0.0))\n    sol = solve(prob)\n\n    #println(sol)\n    table = OrderedDict(\"汽轮机一级入口压力(pa)\" => sol[turbine.in.p][1],\n    \"汽轮机一级入口温度(k)\" => sol[turbine.in.t][1],\n    \"汽轮机一级出口温度(k)\" => sol[turbine.out.t][1],\n    \"汽轮机一级出口熵(J/(mol*k))\" => sol[turbine.out.s][1],\n    \"锅炉入口温度(k)\"=> sol[boiler.in.t][1],\n    \"锅炉出口压力(pa)\"=> sol[boiler.out.p][1],\n    \"锅炉入口压力(pa)\"=> sol[boiler.in.p][1])\n\n    plot_sys = [pump, boiler, turbine, reboiler, returbine, condenser];\n    propx = :s\n    propy = :t\n\n    ss = [sol[getproperty(i.out, propx)][1] for i in plot_sys]\n    tt = [sol[getproperty(i.out, propy)][1] for i in plot_sys]\n\n    xAxis = collect(range(ss[1], ss[2], 15))\n    yAxis = CoolProp.PropsSI.(\"T\", \"P\", sol[pump.out.p], \"S\", collect(range(ss[1], ss[2], 15)), 工质)\n\n    append!(xAxis, collect(range(ss[2], ss[3], 15)))\n    append!(yAxis,collect(range(tt[2], tt[3], 15)))\n\n    append!(xAxis,collect(range(ss[3], ss[4], 15)))\n    append!(yAxis,CoolProp.PropsSI.(\"T\", \"P\", sol[reboiler.out.p], \"S\", collect(range(ss[3], ss[4], 15)), 工质))\n\n    append!(xAxis,collect(range(ss[4], ss[5], 15)))\n    append!(yAxis,collect(range(tt[4], tt[5], 15)))\n\n    append!(xAxis,collect(range(ss[5], ss[6], 15)))\n    append!(yAxis,collect(range(tt[5], tt[6], 15)))\n\n    append!(xAxis,collect(range(ss[6], ss[1], 15)))\n    append!(yAxis,collect(range(tt[6], tt[1], 15)))\n    # println(xAxis)\n    # println(yAxis)\n    figure = transposeMatrix(xAxis, yAxis)\n    #在本地绘图\n    plot_local(figure)\n    return figure,table\nend","category":"page"},{"location":"assets/动态仿真/Ai4EJumulink/代码/jumulink相关代码/","page":"-","title":"-","text":"\"\"\"\n控制系统方框图,由要素组成和它们的邻接矩阵构成.\\n\n使用有向图来储存拓扑关系.\\n\n值得注意的是:以列表示起始,以行表示终止,1代表连接,0代表没连接,-1代表和点的负输入\n\"\"\"\nstruct SystemMap\n  links::Vector{<:AbstractLink}\n  adjacency_matrix::Matrix{Int8}\nend\n\n\"\"\"\n方框图前向通道\n\"\"\"\nstruct ForwardChannel <: AbstractPath\n  value::Int128\n  order::Int64\n  links::Vector{Int16}\n  tf::Union{Nothing,Tfs,Fraction}\nend\n\n\"\"\"\n环路\\n\n易知:方框图中,环路总是可以看作从一个和点出发,然后回到该和点,当然一个和点产生的可能不止一个回路\n\"\"\"\nmutable struct ClosedLoop <: AbstractPath\n  value::Int128\n  order::Int64\n  links::Vector{Int16}\n  tf::Union{Fraction,Tfs,Nothing}\nend\n\n\"\"\"\n利用回溯进行寻路\n\"\"\"\nfunction path_finding(matrix::Matrix, start, stop)\n  # start与stop间全部的路径\n  paths = []\n  # 单条路径的节点栈\n  path = Int16[start]\n  # 前进节点\n  step = start\n  # 所有可能路径节点栈\n  tree = []\n  while true\n    # 当前节点的子节点\n    sons = []\n    for i in eachindex(matrix[step, :])\n      if matrix[step, i] != 0\n        if i in path && i != start\n          continue\n        end\n        append!(sons, i)\n      end\n    end\n    if isempty(sons)\n      if path[end] == stop\n        push!(paths, copy(path))\n        pop!(path)\n        pop!(tree[end])\n        while isempty(tree[end])\n          pop!(tree)\n          pop!(path)\n          isempty(tree) && break\n          pop!(tree[end])\n        end\n        isempty(tree) && break\n        step = tree[end][end]\n        append!(path, step)\n      end\n      pop!(tree[end])\n      pop!(path)\n      while isempty(tree[end])\n        pop!(tree)\n        isempty(tree) && break\n        pop!(tree[end])\n        pop!(path)\n        isempty(path) && break\n      end\n      isempty(tree) && break\n    else\n      push!(tree, sons)\n    end\n    step = tree[end][end]\n    append!(path, step)\n    if path[end] == stop\n      push!(paths, copy(path))\n      pop!(path)\n      pop!(tree[end])\n      while isempty(tree[end])\n        pop!(tree)\n        pop!(path)\n        isempty(tree) && break\n        pop!(tree[end])\n      end\n      isempty(tree) && break\n      step = tree[end][end]\n      append!(path, step)\n    end\n  end\n  return paths\nend\npath_finding(matrix, point) = path_finding(matrix, point, point)\n\n\"\"\"\n将各元素按数组顺序记为二进制数\n\"\"\"\nfunction change(v::Vector)::Int128\n  v = sort(v)\n  value::Int128 = 0\n  for i in v\n    value += 1 << (i - 1)\n  end\n  return value\nend","category":"page"},{"location":"#IES-DOPT-综合能源系统仿真优化平台","page":"主页","title":"IES-DOPT 综合能源系统仿真优化平台","text":"","category":"section"},{"location":"#简介","page":"主页","title":"简介","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"综合能源系统仿真优化平台基于新一代开源科学计算编程语言 Julia 与 Vue3 前端框架，适用于静态仿真求解能动等专业典型问题，动态仿真求解传递函数问题，优化求解复杂综合能源系统配置寻优问题的仿真优化平台。该平台结合能源、计算机等专业特色，充分利用学科交叉以及先进的综合能源系统建模、仿真、优化与控制思想，不断探索与提升编写工业软件的实践能力，助力“碳达峰、碳中和”双碳目标。","category":"page"},{"location":"#平台三大功能","page":"主页","title":"平台三大功能","text":"","category":"section"},{"location":"#.静态仿真","page":"主页","title":"1.静态仿真","text":"","category":"section"},{"location":"#平台导航栏","page":"主页","title":"平台导航栏","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"(Image: )","category":"page"},{"location":"#简介-2","page":"主页","title":"简介","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"该板块共包括四个场景的仿真，即从热力学、流体力学、传热学、自动控制原理中分别选取了一个经典模型进行仿真求解——蒸汽动力循环仿真、文丘里管压力分布、顺流与逆流式换热器温度分布仿真、基于无自平衡能力系统的 PID 控制仿真。","category":"page"},{"location":"","page":"主页","title":"主页","text":"蒸汽动力循环仿真支持三个循环（包括朗肯循环、再热循环以及制冷循环）模式的仿真。通过用户输入的参数（如冷凝器冷却压力、锅炉出口温度等），计算出整个循环过程中温度、压力、焓、熵等参数。同时，该部分使用单独描述系统中每个组件并连接在一起的组件化建模方法，极大地提高了建模的效率。用户可以据此比较不同循环参数和组件配置对性能的影响，优化循环设计，并找到达到最佳性能的操作条件。","category":"page"},{"location":"","page":"主页","title":"主页","text":"文丘里管压力分布仿真利用了伯努利原理对不同参数（如流量、有无摩擦、介质种类等参数）下文丘里管压力分布进行仿真模拟。通过用户输入的不同参数，可以模拟在该参数约束下文丘里管的状态，从而使用户更直观地了解其压力分布情况。","category":"page"},{"location":"","page":"主页","title":"主页","text":"换热器温度分布仿真模拟了一个套管式换热器的换热情况，在操作界面可以调整换热器的长度，介质种类，顺逆流，冷、热流入口温度、流量，通过计算会获得换热器不同部位的温度值，整体换热速率等信息，更直观的了解到换热器的换热情况。此仿真过程将换热原理与 ODE 结合，使模型更精准。","category":"page"},{"location":"","page":"主页","title":"主页","text":"PID 控制仿真通过调节和优化参数，对不同参数组合的仿真结果进行比较，评估 PID（比例-积分-微分）控制器在系统中的性能表现，包括稳态误差、响应时间、抗干扰能力等指标，以找到最佳的 PID 控制器参数，实现更好的控制效果，提高系统的控制精度和稳定性。","category":"page"},{"location":"","page":"主页","title":"主页","text":"静态仿真板尝试了不同领域知识与软件仿真技术的结合，为后续的动态仿真、综合能源系统仿真优化打下坚实基础。","category":"page"},{"location":"#文档索引","page":"主页","title":"文档索引","text":"","category":"section"},{"location":"#[蒸汽动力循环仿真](Static_simulation/蒸汽动力循环仿真.md)","page":"主页","title":"蒸汽动力循环仿真","text":"","category":"section"},{"location":"#[顺流与逆流式换热器仿真](Static_simulation/顺流与逆流式换热器仿真.md)","page":"主页","title":"顺流与逆流式换热器仿真","text":"","category":"section"},{"location":"#[文丘里管压力仿真](Static_simulation/文丘里管压力仿真.md)","page":"主页","title":"文丘里管压力仿真","text":"","category":"section"},{"location":"#[PID-控制仿真实验](Static_simulation/PID控制仿真实验.md)","page":"主页","title":"PID 控制仿真实验","text":"","category":"section"},{"location":"#.动态仿真","page":"主页","title":"2.动态仿真","text":"","category":"section"},{"location":"#平台导航栏-2","page":"主页","title":"平台导航栏","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"(Image: )","category":"page"},{"location":"#文档索引-2","page":"主页","title":"文档索引","text":"","category":"section"},{"location":"#[Jumulink](Dynamic_simulation/Ai4EJumulink.md)","page":"主页","title":"Jumulink","text":"","category":"section"},{"location":"#简介-3","page":"主页","title":"简介","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"对标 MATLAB 的 Simulink 进行设计,实现对于以传递函数为基础的线性系统的描述，建模，求解与结果的可视化，提供一个交互式的图形化环境及可定制模块库，可对各种时变系统，例如通讯、控制、信号处理、影像处理和图像处理系统等进行设计、模拟执行和测试。","category":"page"},{"location":"#.优化","page":"主页","title":"3.优化","text":"","category":"section"},{"location":"#平台导航栏-3","page":"主页","title":"平台导航栏","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"(Image: )","category":"page"},{"location":"#文档索引-3","page":"主页","title":"文档索引","text":"","category":"section"},{"location":"#[离网制氢](Optimization/离网制氢.md)","page":"主页","title":"离网制氢","text":"","category":"section"},{"location":"#简介-4","page":"主页","title":"简介","text":"","category":"section"},{"location":"","page":"主页","title":"主页","text":"优化板块实现了离网制氢场景的模型构建、储氢和储能的技术经济性比对、设备容量优化、方案经济性评价、综合落地制氢价格反推等功能要求。其允许用户根据特定的约束条件，如能源供应、负载需求、储氢容量等，构建风光离网制氢系统的约束场景。用户可以输入风能和太阳能资源数据，设定能源需求和运营约束等参数，以便进行后续分析和优化。平台能够根据用户提供的数据，对不同的储氢和储能技术进行经济性比对。可以计算和分析不同技术方案的成本、效率、能量损失等关键指标，帮助用户确定最具经济性的方案。其具备的设备容量优化功能，可以根据用户设定的约束和目标，通过算法和模拟计算，推导出最佳的设备容量配置。","category":"page"}]
}
